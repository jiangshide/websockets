package cmd

/**
	1.弹幕技术复杂度
	1.1.个直播间：
	1.1.1.在线人数:100万
	1.1.2.发送弹幕:1000条/秒
	1.1.3.推送频率:100万*1000条/秒=10亿条/秒
	1.2.N个直播间:
	1.2.1.推送频率:N*10亿条/秒
	2.拉模式与推模式的区别
	2.1.拉模式
	2.1.1.数据更新频率低,则大多数请求是无效的
	2.1.2.在线用户数据量多,则服务端的查询负载很高
	2.1.3.定时轮询拉取,无法满足时效性要求
	2.2.推模式
	2.2.1.仅在数据更新时才需要推送
	2.2.2.需要维护大量的长连接
	2.2.3.数据更新后可以立即推送
	2.3.基于WebSocket推送
	2.3.1.浏览器支持的socket编程,轻松维持服务端的长连接
	2.3.2.基于TCP可靠传输之上的协议,无需开发者关心通讯细节
	2.3.3.提供了高度抽象的编程接口,业务开发成本较低
	3.掌握WebSocket协议
	3.1.通讯流程:client~server
	3.1.1.client->upgrade->server
	3.1.2.server->switching->client
	3.1.3.client->message->service
	3.1.4.server->message->client
	3.2.传输原理
	3.2.1.协议升级后,继续复用HTTP的底层SOCKET完成后续通讯
	3.2.2.message底层被切分成多个frame帧传输
	3.2.3.编程只需操作message,无需关心frame
	3.2.4.框架底层完成TCP网络I/O，WebSocket协议解析,开发者无需关系
	3.3.抓包观察
	3.3.1.使用chrome开发者工具,观察WebSocket通讯流程
	4.服务端的技术选型与考虑
	4.1.NodeJS
	4.1.1.单线程模型,推送性能有线
	4.2.C/C++
	4.2.1.TCP通讯,WebSocket协议实现成本高
	4.3.Go
	4.3.1.多线程,基于协程模型并发
	4.3.2.成熟的WebSocket标准库,无需造轮子
	5.GO实现WebSocket服务端
	5.1.实现Http服务端:github.com/gorilla/websocket
	5.1.1.WebSocket是http协议Upgrade而来的
	5.1.2.使用http标准库快速实现空接口:/ws
	5.2.完成WebSocket握手
	5.2.1.使用websocket.Upgrader完成协议握手,得到WebSocket长连接
	5.2.2.操作websocket api,读取客户端消息,然后原样发送回去
*/

